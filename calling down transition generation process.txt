Calling Down Transition Generation Process
=======================================

1. Source Files
--------------
- calculate_swaps_down.js: Contains the core logic for calculating valid moves and transitions
- generate_transitions_down.js: Orchestrates the generation process
- transition_data_down.json: The output file where all transitions are stored

2. Process Flow
--------------
a) Initial Setup (generate_transitions_down.js):
   - Create transition data structure using createTransitionData(changeSequences)

b) For each number of bells (5, 6, 8, 10, 12):
   - Process each source pattern
   - Calculate transitions to each target pattern
   - Calculate swaps using findMinimumSwaps

c) Core Calculation (calculate_swaps_down.js):
   - Start with source order
   - Find all valid moves (Lead or 2-position moves)
   - Score each possible move based on how close it gets to target
   - Choose and apply best move
   - Repeat until target order is reached

3. Valid Move Rules
------------------
- Lead: Only the bell in position 2 can use Lead
- Normal moves: Bells must be exactly two positions apart

Example for [1,2,3,4]:
- Valid: [2,Lead] → 2,1,3,4
- Valid: [4,2] → 1,2,4,3
- Valid: [3,1] → 1,3,2,4
- Invalid: [3,2] (not two positions apart)
- Invalid: [4,Lead] (only bell 2 can Lead)

4. Output Format (transition_data_down.json)
------------------------------------------
{
  "5": {
    "Rounds": {
      "Back Rounds": {
        "sourceOrder": [1,2,3,4,5],
        "targetOrder": [5,4,3,2,1],
        "swaps": [[2,"Lead"], [4,2], ...],
        "bellOrders": [[1,2,3,4,5], [2,1,3,4,5], ...]
      }
    }
  }
}

5. Example Transition
--------------------
For moving bell 3 down to follow bell 1 in 5 bells:
Step 0: 1,2,3,4,5
Step 1: 2,1,3,4,5  (using [2,Lead])
Step 2: 2,1,4,3,5  (using [4,2])
Step 3: 2,4,1,3,5  (using [4,1])

6. Final Steps
-------------
- Sort all transitions
- Write to transition_data_down.json
- Test example transitions to verify correctness

Process Requirements
-------------------
1. All moves must be valid according to the rules
2. Find the shortest path to the target order
3. Avoid cycles by tracking visited orders
4. Handle all possible transitions between named patterns 